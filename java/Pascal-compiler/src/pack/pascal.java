/* Generated By:JavaCC: Do not edit this line. pascal.java */
package pack;


import java.io.*;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JMenuBar;
import javax.swing.JScrollBar;
import javax.swing.JTextArea;
import java.awt.event. * ;
import javax.swing.JDialog;
import javax.swing.JFrame;

import pack.myinterface;
import pack.Table_symboles;
import pack.Table_Quad;
import pack.LexTests;
import pack.Symbole;


import java.util.ArrayList;
import java.util.List;



@SuppressWarnings("all")
public class pascal implements pascalConstants {

         //check methodes 
 String Log=new String();

 Table_symboles Tsym=new Table_symboles();
 Table_Quad Tquad=new Table_Quad();

 int err_x=-1,err_y=-1;
 int cptERR=0;
 int chk_meth=1;



void  errorSkipTo(int kind,ParseException e)
{

if(e.currentToken.beginLine!=err_x && e.currentToken.beginColumn!=err_y)
{
   cptERR++;
   JoinInHtml(e);
   System.err.println(e.toString());//skip it after
}
err_x=e.currentToken.beginLine;
err_y=e.currentToken.beginColumn;

Token t;
int index=0;
boolean excepted=false;



for(int x : e.expectedTokenSequences[0]) if (x==kind)  excepted=true;


if (!excepted )
{
do
{index++;
        t=getToken(index);

}
while (t.kind!=kind && t.kind!=END  && t.kind!=SEMICOLON  && t.kind!=EOF  ) ;
if (t.kind==kind) for(int i=0;i<index;i++) getNextToken();

}
}



public void JoinInHtml(ParseException pe)
{

Log+="<font size=\"+1\" color=\"red\"><br>error #<b>"+(cptERR)+"</b>:</font><br>";
Log+="encountree <b>&lt;"+pe.currentToken.next.image+"&gt;</b>";
Log+="dans ligne <b>'"+pe.currentToken.next.beginLine+"'</b>";
Log+="et colomne <b>'"+pe.currentToken.next.beginColumn+"'</b><br>exeptee:";
for(int[] S : pe.expectedTokenSequences)
for(int s :S) {Log+="&lt;";
                                                                                        for(char c :pe.tokenImage[s].toCharArray()) {switch(c)
                                                                                                                                                        {case '<':Log+="&lt;";break;
                                                                                                                                                        case '>':Log+="&gt;";break;
                                                                                                                                                        default :Log+=c;


                                                                                                                                                        };
                                                                                                                                                        };
                                                                                Log+="&gt;";
                                                                                        };

Log+=";</pre><br>";

}





public static void main(String args[])

{
         /************* INTERFACE *************************/
   myinterface mainframe=new myinterface();;
   // pascal parser = new pascal(System.in/*new FileInputStream("../Pascal-compiler/src/pack/tests/t")*/);

}
  public  String ParseIt() throws ParseException {

                String LogGeneral=new String();
                String Result=new String("<h3><font color=\"green\"><u>Analyse Result:</u></font></b><br>");
        LexTests.ReInit();



        cptERR=0;

        Log+="<h3><font color=\"green\"><u>Analyse Syntaxic</u></font></b>";


      System.out.println("Reading from textfield...");

      try {
        this.programme();
         LexTests.FinalTest();
         if (cptERR+Tsym.cptERR+LexTests.cptERR==0) Result+="<font color=\"blue\">compiling completed with success..</font>";
         else{
                         Result+="<font color=\"red\">compiling completed with<b> <font size=\"+2\" color=\"blue\">"+(cptERR+Tsym.cptERR+LexTests.cptERR)+"</font></b> Errors </font>";
                         Result+="(lexical="+LexTests.cptERR+" - syntaxic="+cptERR+" -symantic="+Tsym.cptERR+")";
                        }


      }
      catch (ParseException pe) {
        System.out.println(pe.getMessage());
        cptERR++;
      Log+="<font size=\"+1\" color=\"red\"><br>error#<b>"+cptERR+"</b>:</font><pre><b>detail:</b>"+pe.getMessage()+"</pre>";




      }
       catch (Exception e) {

        System.out.println(e.getMessage());
        Tsym.cptERR++;
       Tsym.JoinInHtml(e);


      }

       catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        LogGeneral="<h3><font color=\"red\"><br>problem dans l'analyse:\n</font></h3>"+e.getMessage();


      };

        LogGeneral="<html><head><title>compiling...<title></head><body><h1><font color=\"red\">Compiling report\u00ae    <br></font></h1>";
        LogGeneral+=LexTests.HighLight+"</td></tr></table><br>";//close the last case
        LogGeneral+=LexTests.Log;
        LogGeneral+=Log;
        LogGeneral+=Tsym.Log;
        LogGeneral+=Result;

        LogGeneral+="<br>"+this.Tsym.ToHTML()+"<br>"+this.Tquad.ToHTML();
        LogGeneral+="<font size=\"-2\" ><center><a href=\"mailto:assem.ch@gmail.com\">by Assem.Ch</a></center></body></html>";

      return LogGeneral;




  }

/* **************************************************** */
/* **************************************************** */
/* **************************************************** */
  final public int programme() throws ParseException {
                    Token t=null;int saveLine=-1;
    try {
      jj_consume_token(PROGRAM);
            saveLine=LexTests.nbLine;
      t = jj_consume_token(IDENT);
      jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
  errorSkipTo(SEMICOLON,e);
    }
    try {
         if (t!=null) Tsym.declare(t.image,"program","","",saveLine);/*Tsym.setOwnerCourant(t.image); */
    } catch (Exception e) {
         Tsym.cptERR++;
       Tsym.JoinInHtml(e);
    }
    try {
      bloc();
      jj_consume_token(FULLSTOP);
    } catch (ParseException e) {
  errorSkipTo(FULLSTOP,e);
    }
  Tsym.FinalTest();{if (true) return 0;}
    throw new Error("Missing return statement in function");
  }

  final public void bloc() throws ParseException {
    partie_declarative();
    try {
      jj_consume_token(BEGIN);
      label_1:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_1;
        }
        serial_ennoce();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGIN:
      case IF:
      case WHILE:
      case FOR:
      case REPEAT:
      case READ:
      case WRITE:
      case GOTO:
      case CASE:
      case IDENT:
        enonce();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(END);
    } catch (ParseException e) {
            errorSkipTo(END,e);
    }
  }

  final public void partie_declarative() throws ParseException {
Token t=null;
String x="";
String y;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      jj_consume_token(LABEL);
      label_2:
      while (true) {
        serial_dcllbl();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(CONST);
      t = jj_consume_token(IDENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        x = type();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(E);
      y = constante();
      jj_consume_token(SEMICOLON);
 try
{
{       if (t!=null) Tsym.declare(t.image,"constant",x,y,LexTests.nbLine); }

        }
  catch (Exception e) {

         Tsym.cptERR++;
       Tsym.JoinInHtml(e);


      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      label_4:
      while (true) {
        serial_dclvar();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROCEDURE:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      serial_dclproc();
    }
  }

  final public void serial_dclvar() throws ParseException {
    try {
      dclvar();
      jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
            errorSkipTo(SEMICOLON,e);
    }
  }

  final public void serial_dcllbl() throws ParseException {
    try {
      dcllbl();
      jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
            errorSkipTo(SEMICOLON,e);
    }
  }

  final public void serial_dclproc() throws ParseException {
    try {
      dclproc();
      jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
            errorSkipTo(SEMICOLON,e);
    }
  }

  final public void dclvar() throws ParseException {
        Token ident0=null;
        String type0;
        int saveLine=-1;
        String param0=Tsym.Tpar.NewParam();
    label_6:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_6;
      }
      serial_ident(param0);
    }
    try {
      ident0 = jj_consume_token(IDENT);
                saveLine=LexTests.nbLine;
      jj_consume_token(COLON);
    } catch (ParseException e) {
            errorSkipTo(COLON,e);
    }
    type0 = type();
try
{
{       if (ident0!=null) {
                                                if (type0!="array") Tsym.declare(ident0.image,"variable",type0,"",saveLine);
                                                else Tsym.declare(ident0.image,"variable",type0,Tsym.SEscape,saveLine);
                                                }
   }
        }
  catch (Exception e) {

         Tsym.cptERR++;
       Tsym.JoinInHtml(e);


      }
      Tsym.Tpar.UpdateParam(param0,type0);
  }

  final public void serial_ident(String type0) throws ParseException {
Token ident0=null;
int saveLine=-1;
    try {
      ident0 = jj_consume_token(IDENT);
                saveLine=LexTests.nbLine;
      jj_consume_token(COMMA);
    } catch (ParseException e) {
            errorSkipTo(COMMA,e);
    }
try     {if (ident0!=null)      Tsym.declare(ident0.image,"variable",type0,"",saveLine);}
catch (Exception e) {Tsym.cptERR++; Tsym.JoinInHtml(e);}
  }

  final public String type() throws ParseException {
Token t=null;
String s;
int taille=0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
      t = jj_consume_token(ARRAY);
      taille = dclarray_index();
      jj_consume_token(OF);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    s = type_final();
 if (t!=null) {
                        Tquad.modifyQuad(Tquad.getCourant()-1,4,s);
                        for(int i=0;i<taille;i++)
                        {
                        Tquad.genereQuad("null","","","");
                        }
                                }
        if (t!=null) {if (true) return "array";} else  {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public int dclarray_index() throws ParseException {
Token t=null,s=null;
int taille=0;
    try {
      jj_consume_token(SQRBRACKETOPEN);
      t = jj_consume_token(NATURAL);
      jj_consume_token(DOTDOT);
      s = jj_consume_token(NATURAL);
      jj_consume_token(SQRBRACKETCLOSE);
    } catch (ParseException e) {
            errorSkipTo(SQRBRACKETCLOSE,e);
    }
          int i0=Integer.valueOf(t.image);
          int i1=Integer.valueOf(s.image);
          if (i0>i1) {
                                        Tsym.cptERR++;
                                        Tsym.JoinInHtml(new Exception("premier index <b>"+i0+"</b> de tablau  superiuer a le deuxieme <b>"+i1+"</b> a la ligne "+LexTests.nbLine));
                                        }
          else taille=(i1-i0+1);
        Tsym.SEscape=""+Tquad.genereQuad("array",""+i0,""+i1,"");

        {if (true) return taille;}
    throw new Error("Missing return statement in function");
  }

  final public void dcllbl() throws ParseException {
        Token ident0=null;
        String type0;
        int saveLine=-1;
    label_7:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_7;
      }
      serial_ident_lbl();
    }
    ident0 = jj_consume_token(IDENT);
                                                        try     {Tsym.declare(ident0.image,"label","",Tsym.Tpar.NewParam(),LexTests.nbLine);}
                                                        catch (Exception e) {Tsym.cptERR++; Tsym.JoinInHtml(e);}
  }

  final public void serial_ident_lbl() throws ParseException {
Token ident0=null;
int saveLine=-1;
    try {
      ident0 = jj_consume_token(IDENT);
                saveLine=LexTests.nbLine;
      jj_consume_token(COMMA);
    } catch (ParseException e) {
            errorSkipTo(COMMA,e);
    }
try     {if (ident0!=null)      Tsym.declare(ident0.image,"label","","",saveLine);}
catch (Exception e) {Tsym.cptERR++; Tsym.JoinInHtml(e);}
  }

  final public void dclproc() throws ParseException {
Token t=null;
int SaveAdr=-1;
String SaveOwner="";
    try {
      jj_consume_token(PROCEDURE);
      t = jj_consume_token(IDENT);
      jj_consume_token(SEMICOLON);
                                    SaveAdr=Tquad.genereQuad("jmp","","","");
    } catch (ParseException e) {
            errorSkipTo(SEMICOLON,e);
    }
 try    {if (t!=null) {Tsym.declare(t.image,"procedure","",""+SaveAdr,LexTests.nbLine);
                                                SaveOwner=Tsym.getOwnerCourant();
                                                Tsym.setOwnerCourant(t.image);} }
catch (Exception e) {Tsym.cptERR++;Tsym.JoinInHtml(e);}
    try {
      bloc();
         String adr=Tquad.NewTemp();
        Tquad.genereQuad("pop","","",adr);
        Tquad.genereQuad("call","","",adr);
        if (SaveAdr!=-1) Tquad.modifyQuad(SaveAdr,4,""+ Tquad.getCourant());
                 Tsym.setOwnerCourant(SaveOwner);
    } catch (ParseException e) {
                          errorSkipTo(SEMICOLON,e);
    }
  }

  final public void enonce_compose() throws ParseException {
    try {
      jj_consume_token(BEGIN);
      label_8:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_8;
        }
        serial_ennoce();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGIN:
      case IF:
      case WHILE:
      case FOR:
      case REPEAT:
      case READ:
      case WRITE:
      case GOTO:
      case CASE:
      case IDENT:
        enonce();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(END);
    } catch (ParseException e) {
                          errorSkipTo(END,e);
    }
  }

  final public void serial_ennoce() throws ParseException {
    try {
      enonce();
      jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
                           errorSkipTo(SEMICOLON,e);
    }
  }

  final public void enonce() throws ParseException {
        Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      /*affectation() | appel_procedure() */
      
      t = jj_consume_token(IDENT);
      X(t.image);
      break;
    case READ:
      entree();
      break;
    case WRITE:
      sortie();
      break;
    case BEGIN:
      enonce_compose();
      break;
    case IF:
    case CASE:
      enonce_conditionnel();
      break;
    case WHILE:
    case FOR:
    case REPEAT:
      enonce_iteratif();
      break;
    case GOTO:
      goto_label();

      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void X(String t) throws ParseException {
String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGNOP:
    case SQRBRACKETOPEN:
      affectation(t);
                                try
                                {if (t!=null) if(Tsym.search(t,true)) Tsym.verify_type(t,"variable") ;}
                        catch (Exception e) {Tsym.cptERR++;Tsym.JoinInHtml(e);}
      break;
    case COLON:
      jj_consume_token(COLON);
             try
                                {
                                        if (t!=null) if(Tsym.search(t,true)) Tsym.verify_type(t,"label") ;

                                String adr=Tsym.getVal(t);
             if (adr.charAt(0)=='$') {Tsym.setVal(t,""+Tquad.getCourant());
                                                                Tquad.UpdateParam(adr,""+Tquad.getCourant());}
             else Tsym.THROW("l'etiquette de "+t+" est deja  definie"+"");
             }
                        catch (Exception e) {Tsym.cptERR++;Tsym.JoinInHtml(e);};
      break;
    default:
      jj_la1[11] = jj_gen;
    Tquad.genereQuad("push","","",""+(Tquad.getCourant()+2));
        Tquad.genereQuad("call","","",Tsym.getVal(t));

        try
                                {if (t!=null) if(Tsym.search(t,true)) Tsym.verify_type(t,"procedure") ;}
                        catch (Exception e) {Tsym.cptERR++;Tsym.JoinInHtml(e);}
    }
  }

  final public void affectation(String t) throws ParseException {
String s=null;
String u=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQRBRACKETOPEN:
      s = array_index(t);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(ASSIGNOP);
    u = expression();
                                               if (s==null) s=t;Tquad.genereQuad("mov",u,"",s);
  }

  final public String array_index(String x) throws ParseException {
String t=null;
String base=Tsym.getVal(x);
    try {
      jj_consume_token(SQRBRACKETOPEN);
      t = expression();
      jj_consume_token(SQRBRACKETCLOSE);
    } catch (ParseException e) {
            errorSkipTo(SQRBRACKETCLOSE,e);
    }
        if (t!=null) {if (true) return ""+t+"("+base+")";}
                           else {if (true) return "";}
    throw new Error("Missing return statement in function");
  }

  final public String variable() throws ParseException {
        Token t;
    String x="";
    t = jj_consume_token(IDENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQRBRACKETOPEN:
      x = array_index(t.image);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
try
{Tsym.search(t.image,true);}
  catch (Exception e) { Tsym.cptERR++;  Tsym.JoinInHtml(e);}
if (x!="") {if (true) return x;}else {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String expression() throws ParseException {
String x,y=null,z=null;
    x = expression_simple();
    if (jj_2_5(2)) {
      y = oprel();
      z = expression_simple();
    } else {
      ;
    }
 if (z==null ) {{if (true) return x;}}
else {
                Tquad.genereQuad("cmp",x,z,"");
                String inst="";

            if (y=="=") inst="je";
             if (y=="<") inst="jl";
             if (y==">") inst="jg";
             if (y=="<=") inst="jle";
             if (y==">=") inst="jge";
             if (y=="<>") inst="jne";

            Tquad.genereQuad(inst,"","",""+(Tquad.getCourant()+2));
            String tmp=Tquad.NewTemp();
            Tquad.genereQuad("mov","0","",tmp);
            Tquad.genereQuad("jmp","","",""+(Tquad.getCourant()+2));
            Tquad.genereQuad("mov","1","",tmp);
            {if (true) return tmp;}

            }
    throw new Error("Missing return statement in function");
  }

  final public String oprel() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      t = jj_consume_token(LT);
      break;
    case LTE:
      t = jj_consume_token(LTE);
      break;
    case GT:
      t = jj_consume_token(GT);
      break;
    case GTE:
      t = jj_consume_token(GTE);
      break;
    case NE:
      t = jj_consume_token(NE);
      break;
    case E:
      t = jj_consume_token(E);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
 {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String expression_simple() throws ParseException {
        String w=null,x;
         String tmp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      w = signe();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    x = terme();
                       tmp=x;
                                                if (w!=null) {if (w=="-")  { tmp=Tquad.NewTemp();
                                                                 Tquad.genereQuad("neg",x,"",tmp);

                                                                        };
                                        };
    label_9:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_9;
      }
      tmp = serial_opadd(tmp);
    }
            {if (true) return tmp;}
    throw new Error("Missing return statement in function");
  }

  final public String serial_opadd(String s) throws ParseException {
        String y,z;
    y = opadd();
    z = terme();
        String inst=y;
            if (y=="+") inst="add";
            if (y=="-") inst="sub";

            String tmp=Tquad.NewTemp();
            Tquad.genereQuad(inst,s,z,tmp);

            {if (true) return tmp;}
    throw new Error("Missing return statement in function");
  }

  final public String opadd() throws ParseException {
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
      break;
    case OR:
      t = jj_consume_token(OR);
      break;
    case XOR:
      t = jj_consume_token(XOR);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
 {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String signe() throws ParseException {
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
 {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String terme() throws ParseException {
        String x;
        String tmp;
    x = facteur();
             tmp=x;
    label_10:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_10;
      }
      tmp = serial_opmult(tmp);
    }
   {if (true) return tmp;}
    throw new Error("Missing return statement in function");
  }

  final public String serial_opmult(String s) throws ParseException {
String y,z;
    y = opmult();
    z = facteur();
            String inst=y;
            if (y=="*") inst="mul";
            if (y=="/") inst="divqq";



            String tmp =Tquad.NewTemp();
            Tquad.genereQuad(inst,s,z,tmp);


                        {if (true) return tmp;}
    throw new Error("Missing return statement in function");
  }

  final public String opmult() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
      t = jj_consume_token(MULTIPLY);
      break;
    case DIVIDE:
      t = jj_consume_token(DIVIDE);
      break;
    case DIV:
      t = jj_consume_token(DIV);
      break;
    case AND:
      t = jj_consume_token(AND);
      break;
    case MOD:
      t = jj_consume_token(MOD);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String facteur() throws ParseException {
        String x;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CARACTERE:
    case NATURAL:
    case REEL:
    case BOOLEEN:
    case CHAINE:
      x = constante();
               {if (true) return x;}
      break;
    case IDENT:
      x = variable();
                {if (true) return x;}
      break;
    case NOT:
      jj_consume_token(NOT);
      x = facteur();
                        String tmp =Tquad.NewTemp();
                                         Tquad.genereQuad("not",x,"",tmp);

                                                 {if (true) return tmp;}
      break;
    case BRACKETOPEN:
      try {
        jj_consume_token(BRACKETOPEN);
        x = expression();
        jj_consume_token(BRACKETCLOSE);
                                                     {if (true) return x;}
      } catch (ParseException e) {
                                         errorSkipTo(BRACKETCLOSE,e);
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String constante() throws ParseException {
Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NATURAL:
      t = jj_consume_token(NATURAL);
      break;
    case CARACTERE:
      t = jj_consume_token(CARACTERE);
      break;
    case BOOLEEN:
      t = jj_consume_token(BOOLEEN);
      break;
    case REEL:
      t = jj_consume_token(REEL);
      break;
    case CHAINE:
      t = jj_consume_token(CHAINE);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
 {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String goto_label() throws ParseException {
        Token t;
    jj_consume_token(GOTO);
    t = jj_consume_token(IDENT);
 try
{
if(Tsym.search(t.image,true)) Tsym.verify_type(t.image,"label") ;

        }
  catch (Exception e) {

         Tsym.cptERR++;
      Tsym.JoinInHtml(e);


      }

    Tquad.genereQuad("jmp","","",Tsym.getVal(t.image));

  {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public void entree() throws ParseException {
        String x;
    jj_consume_token(READ);
    try {
      jj_consume_token(BRACKETOPEN);
      label_11:
      while (true) {
        if (jj_2_8(2)) {
          ;
        } else {
          break label_11;
        }
        serial_variable();
      }
      x = variable();
                                                Tquad.genereQuad("read","","",x);
      jj_consume_token(BRACKETCLOSE);
    } catch (ParseException e) {
                                                                                                    errorSkipTo(BRACKETCLOSE,e);
    }
  }

  final public void serial_variable() throws ParseException {
        String x;
    try {
      x = variable();
              Tquad.genereQuad("read","","",x);
      jj_consume_token(COMMA);
    } catch (ParseException e) {
errorSkipTo(COMMA,e);
    }
  }

  final public void sortie() throws ParseException {
        String x;
    jj_consume_token(WRITE);
    try {
      jj_consume_token(BRACKETOPEN);
      label_12:
      while (true) {
        if (jj_2_9(2)) {
          ;
        } else {
          break label_12;
        }
        serial_expression();
      }
      x = expression();
                                                      Tquad.genereQuad("write","","",x);
      jj_consume_token(BRACKETCLOSE);
    } catch (ParseException e) {
errorSkipTo(BRACKETCLOSE,e);
    }
  }

  final public void serial_expression() throws ParseException {
String x;
    try {
      x = expression();
               Tquad.genereQuad("write","","",x);
      jj_consume_token(COMMA);
    } catch (ParseException e) {
errorSkipTo(COMMA,e);
    }
  }

  final public void enonce_conditionnel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      case_of();
      break;
    case IF:
      if_then_else();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void case_of() throws ParseException {
String adr=Tsym.Tpar.NewParam();
String var;
    try {
      jj_consume_token(CASE);
      var = expression();
      jj_consume_token(OF);
      label_13:
      while (true) {
        if (jj_2_10(2)) {
          ;
        } else {
          break label_13;
        }
        serial_case_statment(adr,var);
      }
      case_statment(adr,var);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        jj_consume_token(ELSE);
        enonce();
        if (jj_2_11(2)) {
          jj_consume_token(SEMICOLON);
        } else {
          ;
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(END);
       Tsym.Tpar.UpdateParam(adr,""+Tquad.getCourant());
    } catch (ParseException e) {
errorSkipTo(END,e);
    }
  }

  final public void serial_case_statment(String adr,String var) throws ParseException {
    try {
      case_statment(adr,var);
      jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
errorSkipTo(SEMICOLON,e);
    }
  }

  final public void case_statment(String adr,String var) throws ParseException {
        String x="_ERR_";
        int SaveAdr=-1;
    try {
      x = constante();
      jj_consume_token(COLON);
    } catch (ParseException e) {
errorSkipTo(SEMICOLON,e);
    }
                                        String tmp =Tquad.NewTemp();
                                                Tquad.genereQuad("cmp",var,x,tmp);
                                             SaveAdr=Tquad.genereQuad("jnz","","","");
    enonce();
                         Tquad.genereQuad("jmp","","",""+adr);
                                Tquad.modifyQuad(SaveAdr,4,""+Tquad.getCourant());
  }

  final public void if_then_else() throws ParseException {
        int SaveAdr,SaveAdr2;
    jj_consume_token(IF);
    expression();
                   SaveAdr=Tquad.genereQuad("jz","","","");
    jj_consume_token(THEN);
    enonce();
                 Tquad.modifyQuad(SaveAdr,4,""+Tquad.getCourant());
    if (jj_2_12(2)) {
      jj_consume_token(ELSE);
                      SaveAdr2=Tquad.genereQuad("jmp","","","");
                                          Tquad.modifyQuad(SaveAdr,4,""+Tquad.getCourant());
      enonce();
          Tquad.modifyQuad(SaveAdr2,4,""+Tquad.getCourant());
    } else {
      ;
    }
  }

  final public void enonce_iteratif() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      tq();
      break;
    case REPEAT:
      repeter();
      break;
    case FOR:
      pour();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void tq() throws ParseException {
int SaveAdr,SaveAdr2;
    jj_consume_token(WHILE);
         SaveAdr=Tquad.getCourant();
    expression();
              SaveAdr2=Tquad.genereQuad("jz","","","");
    jj_consume_token(DO);
    enonce();
                Tquad.genereQuad("jmp","","",""+(SaveAdr));
                                Tquad.modifyQuad(SaveAdr2,4,""+Tquad.getCourant());
  }

  final public void repeter() throws ParseException {
int SaveAdr;
    jj_consume_token(REPEAT);
          SaveAdr=Tquad.getCourant();
    enonce();
    jj_consume_token(UNTIL);
    expression();
                                 Tquad.genereQuad("jnz","","",""+SaveAdr);
  }

  final public void pour() throws ParseException {
Token t,s=null;
String x,y,z;
int SaveAdr,SaveAdr2;
    jj_consume_token(FOR);
    t = jj_consume_token(IDENT);
    affectation(t.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TO:
      s = jj_consume_token(TO);
      break;
    case DOWNTO:
      s = jj_consume_token(DOWNTO);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                       SaveAdr=Tquad.getCourant();
    x = expression();
                 Tquad.genereQuad("cmp",t.image,x,"");
                                SaveAdr2=Tquad.genereQuad("jz","","","");
    jj_consume_token(DO);
    enonce();
                 if (s.image=="to") Tquad.genereQuad("add",t.image,"1",t.image);
                                 else Tquad.genereQuad("sub",t.image,"1",t.image);//if downto
                                  Tquad.genereQuad("jmp","","",""+SaveAdr);
                                  Tquad.modifyQuad(SaveAdr2,4,""+Tquad.getCourant());
   try{Tsym.search(t.image,true);}  catch (Exception e) {Tsym.cptERR++; Tsym.JoinInHtml(e);}
  }

  final public String type_final() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
      break;
    case REAL:
      t = jj_consume_token(REAL);
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
      break;
    case STRING:
      t = jj_consume_token(STRING);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(REPEAT)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(READ)) return true;
    if (jj_scan_token(BRACKETOPEN)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_28()) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(SQRBRACKETOPEN)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    if (jj_scan_token(ASSIGNOP)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(BEGIN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_31()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_17()) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(BRACKETOPEN)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(WRITE)) return true;
    if (jj_scan_token(BRACKETOPEN)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_30()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_27()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(IDENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public pascalTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000000,0x0,0x0,0x0,0x0,0x0,0x80000,0x4000000,0x20000000,0x8000000,0x8000000,0x800,0x0,0x0,0x3f000,0x180,0x180,0x180,0x600,0x0,0x0,0x0,0x0,0x0,0x0,0x1f00000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x6c0129,0x0,0x100000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x6c0129,0x6c0129,0x0,0x0,0x0,0x0,0x0,0x1800,0x0,0x30400,0x2000,0x0,0x400001,0x0,0x128,0xc0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x2,0x2,0x0,0x0,0x800,0x2,0x0,0x0,0x0,0x2,0x2,0x8800,0x8000,0x8000,0x0,0x0,0x0,0x0,0x0,0x21da,0x1d8,0x0,0x200,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public pascal(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public pascal(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new pascalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public pascal(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new pascalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public pascal(pascalTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(pascalTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[82];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 82; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
